import gzip
import json
from typing import Optional, Literal

import numpy as np
from numpy.typing import NDArray

from ..validation import correct_event_order, correct_local_timestamp, validate_event_order
from ...types import (
    DEPTH_EVENT,
    DEPTH_CLEAR_EVENT,
    DEPTH_SNAPSHOT_EVENT,
    TRADE_EVENT,
    BUY_EVENT,
    SELL_EVENT,
    event_dtype
)


def convert(
        input_filename: str,
        output_filename: Optional[str] = None,
        opt: Literal['', 'm', 't', 'mt'] = '',
        base_latency: float = 0,
        combined_stream: bool = True,
        buffer_size: int = 100_000_000
) -> NDArray:
    r"""
    Converts raw Binance Futures feed stream file into a format compatible with HftBacktest.
    If you encounter an ``IndexError`` due to an out-of-bounds, try increasing the ``buffer_size``.

    **File Format:**

    .. code-block::

        local_timestamp raw_stream
        1660228023037049 {"stream":"btcusdt@depth@0ms","data":{"e":"depthUpdate","E":1660228023941,"T":1660228023931,"s":"BTCUSDT","U":1801732831593,"u":1801732832589,"pu":1801732831561,"b":[["2467.10","0.000"],["12006.00","0.001"],["24427.70","4.350"],["24620.30","0.172"],["24644.00","44.832"],["24645.40","0.203"],["24652.80","4.900"],["24664.10","4.279"],["24666.50","0.554"],["24666.80","6.764"],["24668.70","7.428"],["24670.90","2.000"],["24671.00","0.000"],["24672.70","0.000"],["24688.30","0.000"]],"a":[["24653.60","0.000"],["24669.80","0.000"],["24670.20","0.000"],["24670.70","0.000"],["24670.90","0.000"],["24671.00","20.812"],["24672.10","0.000"],["24672.30","0.001"],["24674.60","1.520"],["24674.80","0.000"],["24684.20","4.519"],["24684.30","0.202"],["24685.00","0.937"],["24690.90","4.827"],["24693.60","1.500"],["24729.10","0.171"]]}}
        1660228023038319 {"stream":"btcusdt@depth@0ms","data":{"e":"depthUpdate","E":1660228023977,"T":1660228023966,"s":"BTCUSDT","U":1801732832805,"u":1801732834115,"pu":1801732832589,"b":[["2467.10","0.008"],["24643.00","4.457"],["24656.30","0.010"],["24657.70","0.005"],["24658.80","1.000"],["24658.90","1.500"],["24659.50","3.781"],["24659.70","1.806"],["24659.90","0.105"],["24660.60","0.787"],["24666.30","5.033"],["24666.40","0.012"],["24666.50","0.556"],["24668.70","7.426"],["24668.90","0.000"],["24670.90","2.535"],["24680.00","0.000"],["24688.30","0.000"]],"a":[["24653.60","0.000"],["24670.10","0.000"],["24670.60","0.000"],["24670.70","0.000"],["24670.90","0.000"],["24671.00","20.642"],["24672.00","0.000"],["24672.10","0.000"],["24673.50","0.145"],["24673.60","1.567"],["24674.50","3.746"],["24674.60","1.520"],["24678.30","1.304"],["24678.40","0.001"],["24678.80","0.546"],["24678.90","0.002"],["24681.60","0.020"],["24681.70","0.613"],["24681.90","0.077"],["24682.10","3.000"],["24682.20","0.000"],["24683.70","0.163"],["24683.80","4.162"],["24684.00","1.227"],["24684.20","4.519"],["24684.30","0.202"],["24684.90","1.331"],["24685.70","0.156"],["24685.80","0.325"],["24686.70","0.648"],["24692.60","0.040"],["24700.00","47.420"],["24729.10","0.006"]]}}
        1660228023043260 {"stream":"btcusdt@trade","data":{"e":"trade","E":1660228023980,"T":1660228023973,"s":"BTCUSDT","t":2691833663,"p":"24670.90","q":"0.022","X":"MARKET","m":true}}
        1660228023052991 {"stream":"btcusdt@trade","data":{"e":"trade","E":1660228023991,"T":1660228023983,"s":"BTCUSDT","t":2691833664,"p":"24671.00","q":"0.001","X":"MARKET","m":false}}
        1660228023071108 {"stream":"btcusdt@depth@0ms","data":{"e":"depthUpdate","E":1660228024010,"T":1660228024002,"s":"BTCUSDT","U":1801732834136,"u":1801732835323,"pu":1801732834115,"b":[["2467.10","0.000"],["12006.00","0.000"],["24599.40","0.641"],["24603.20","0.104"],["24625.50","0.152"],["24645.20","0.476"],["24646.80","0.081"],["24652.60","0.254"],["24664.10","4.279"],["24666.50","0.878"],["24668.80","0.004"],["24670.90","2.513"],["24688.30","0.000"],["24787.00","0.000"]],"a":[["24653.60","0.000"],["24668.10","0.000"],["24668.70","0.000"],["24669.50","0.000"],["24669.80","0.000"],["24670.00","0.000"],["24670.60","0.000"],["24670.70","0.000"],["24670.90","0.000"],["24671.00","20.641"],["24672.20","0.000"],["24672.30","0.001"],["24673.50","0.040"],["24673.90","0.105"],["24674.70","2.139"],["24674.80","0.000"],["24683.70","0.963"],["24683.90","0.009"],["24685.70","0.556"],["24709.30","0.254"],["24723.80","0.000"],["24728.30","0.193"],["24729.50","4.477"],["24739.40","0.807"],["24743.20","0.235"],["24795.00","0.130"]]}}
        1660228023117894 {"stream":"btcusdt@depth@0ms","data":{"e":"depthUpdate","E":1660228024044,"T":1660228024034,"s":"BTCUSDT","U":1801732835406,"u":1801732836571,"pu":1801732835323,"b":[["2467.10","0.000"],["24337.10","2.462"],["24616.50","1.050"],["24619.00","0.235"],["24640.00","5.148"],["24649.80","2.805"],["24650.00","14.374"],["24651.90","3.000"],["24653.30","1.400"],["24658.70","1.142"],["24658.80","0.000"],["24659.60","3.263"],["24659.70","0.006"],["24660.50","0.840"],["24660.60","0.387"],["24662.20","0.202"],["24663.10","7.147"],["24664.00","0.922"],["24664.20","0.131"],["24664.50","0.027"],["24666.20","7.066"],["24666.40","0.012"],["24668.80","0.002"],["24669.30","0.002"],["24670.20","0.811"],["24670.90","5.817"],["24688.30","0.000"]],"a":[["24653.60","0.000"],["24669.80","0.000"],["24669.90","0.000"],["24670.90","0.000"],["24671.00","20.121"],["24672.10","0.000"],["24672.80","0.000"],["24674.60","1.520"],["24675.30","0.421"],["24681.20","0.239"],["24681.50","1.343"],["24681.60","0.020"],["24681.70","0.213"],["24683.60","2.929"],["24683.70","0.163"],["24683.80","2.162"],["24684.70","0.646"],["24684.90","0.731"],["24692.90","0.321"],["24693.10","0.040"],["24700.70","0.537"],["24703.60","0.210"],["24721.50","7.245"]]}}
        1660228023125009 {"stream":"btcusdt@trade","data":{"e":"trade","E":1660228024062,"T":1660228024055,"s":"BTCUSDT","t":2691833665,"p":"24670.90","q":"0.002","X":"MARKET","m":true}}
        1660228023128966 {"stream":"btcusdt@trade","data":{"e":"trade","E":1660228024067,"T":1660228024061,"s":"BTCUSDT","t":2691833666,"p":"24670.90","q":"0.020","X":"MARKET","m":true}}
        1660228023138740 {"stream":"btcusdt@depth@0ms","data":{"e":"depthUpdate","E":1660228024077,"T":1660228024066,"s":"BTCUSDT","U":1801732836639,"u":1801732837803,"pu":1801732836571,"b":[["2467.10","0.000"],["24659.00","0.000"],["24659.30","2.500"],["24663.00","1.038"],["24664.20","0.118"],["24666.20","7.065"],["24666.50","0.554"],["24666.70","3.987"],["24666.80","7.088"],["24666.90","0.014"],["24667.40","1.506"],["24668.90","0.006"],["24670.10","0.272"],["24670.90","6.726"],["24688.30","0.000"]],"a":[["24653.60","0.000"],["24668.70","0.000"],["24670.30","0.000"],["24670.50","0.000"],["24670.90","0.000"],["24679.00","0.001"],["24703.10","1.500"],["24710.50","0.057"],["24728.30","0.028"],["24768.50","0.318"],["24980.10","5.446"],["25050.00","119.300"]]}}
        1660228023149748 {"stream":"btcusdt@trade","data":{"e":"trade","E":1660228024088,"T":1660228024081,"s":"BTCUSDT","t":2691833667,"p":"24671.00","q":"0.063","X":"MARKET","m":false}}

        b'1724555575449241638 {"channel":"futures.order_book","event":"all","result":{"asks":[{"p":"64126.5","s":10995},{"p":"64128.1","s":6756},{"p":"64128.2","s":15208},{"p":"64130.5","s":346},{"p":"64131.5","s":984},{"p":"64132.3","s":1},{"p":"64132.7","s":1629},{"p":"64133.3","s":1},{"p":"64133.6","s":4},{"p":"64134","s":312},{"p":"64134.6","s":3565},{"p":"64134.7","s":1559},{"p":"64135","s":5941},{"p":"64135.5","s":2458},{"p":"64136.1","s":285},{"p":"64136.2","s":4},{"p":"64136.5","s":389},{"p":"64137","s":1949},{"p":"64137.1","s":18},{"p":"64137.3","s":1609},{"p":"64137.5","s":312},{"p":"64138.2","s":5596},{"p":"64138.3","s":2900},{"p":"64139","s":1},{"p":"64139.3","s":197},{"p":"64139.5","s":5278},{"p":"64139.6","s":4699},{"p":"64139.7","s":3152},{"p":"64140.3","s":5317},{"p":"64140.5","s":1559},{"p":"64140.8","s":654},{"p":"64141","s":312},{"p":"64141.1","s":1574},{"p":"64141.2","s":1949},{"p":"64141.3","s":4},{"p":"64141.8","s":25},{"p":"64143.2","s":44},{"p":"64143.5","s":1641},{"p":"64143.8","s":245},{"p":"64144","s":2907},{"p":"64144.1","s":10676},{"p":"64144.2","s":587},{"p":"64144.3","s":17782},{"p":"64144.5","s":316},{"p":"64144.7","s":2900},{"p":"64145.9","s":9770},{"p":"64146.3","s":240},{"p":"64146.4","s":4},{"p":"64146.5","s":640},{"p":"64146.6","s":1958},{"p":"64147.3","s":6232},{"p":"64147.4","s":248},{"p":"64147.8","s":7934},{"p":"64147.9","s":5019},{"p":"64148","s":13212},{"p":"64148.1","s":320},{"p":"64148.4","s":640},{"p":"64148.9","s":5318},{"p":"64149","s":467},{"p":"64149.6","s":4},{"p":"64149.7","s":1892},{"p":"64149.8","s":10508},{"p":"64149.9","s":5047},{"p":"64150","s":156},{"p":"64150.5","s":6007},{"p":"64151.1","s":16},{"p":"64151.5","s":312},{"p":"64151.7","s":5893},{"p":"64151.9","s":9657},{"p":"64152","s":15},{"p":"64153.1","s":320},{"p":"64153.7","s":3220},{"p":"64153.9","s":320},{"p":"64154","s":320},{"p":"64154.1","s":629},{"p":"64154.5","s":943},{"p":"64154.6","s":320},{"p":"64154.7","s":6604},{"p":"64155","s":331},{"p":"64155.1","s":640},{"p":"64155.2","s":320},{"p":"64155.5","s":1566},{"p":"64155.6","s":322},{"p":"64156.1","s":320},{"p":"64156.5","s":4939},{"p":"64157","s":2914},{"p":"64157.1","s":320},{"p":"64157.5","s":16},{"p":"64157.6","s":2005},{"p":"64158","s":598},{"p":"64158.2","s":4},{"p":"64158.7","s":4},{"p":"64158.9","s":1},{"p":"64159","s":10},{"p":"64159.2","s":5318},{"p":"64159.3","s":320},{"p":"64159.4","s":1871},{"p":"64160","s":1871},{"p":"64160.1","s":9337},{"p":"64160.4","s":100}],"bids":[{"p":"64126.4","s":4913},{"p":"64125.5","s":1559},{"p":"64124.9","s":283},{"p":"64123.7","s":5896},{"p":"64123.5","s":312},{"p":"64123.4","s":31246},{"p":"64122.9","s":314},{"p":"64121.2","s":1},{"p":"64120.1","s":166},{"p":"64120","s":701},{"p":"64119.9","s":7},{"p":"64118.9","s":25},{"p":"64118.6","s":7},{"p":"64118","s":311},{"p":"64117.9","s":613},{"p":"64116.8","s":94},{"p":"64116.7","s":1566},{"p":"64116.6","s":5672},{"p":"64116.5","s":3213},{"p":"64116.4","s":390},{"p":"64116","s":320},{"p":"64115.9","s":94},{"p":"64115.8","s":338},{"p":"64115.3","s":4699},{"p":"64115.2","s":10340},{"p":"64115.1","s":5319},{"p":"64114.7","s":18398},{"p":"64114.6","s":320},{"p":"64114.4","s":16},{"p":"64114","s":38},{"p":"64113.9","s":1559},{"p":"64113.6","s":19},{"p":"64113","s":312},{"p":"64112.8","s":1879},{"p":"64112","s":3198},{"p":"64111.9","s":5327},{"p":"64111.7","s":2900},{"p":"64111.6","s":1},{"p":"64111.5","s":320},{"p":"64111.3","s":320},{"p":"64111.1","s":777},{"p":"64110.9","s":7},{"p":"64110.3","s":640},{"p":"64110","s":500},{"p":"64109.8","s":320},{"p":"64109.7","s":970},{"p":"64109.6","s":4699},{"p":"64109.5","s":312},{"p":"64109.4","s":600},{"p":"64109.2","s":320},{"p":"64109.1","s":320},{"p":"64108.8","s":970},{"p":"64108.5","s":1290},{"p":"64108.4","s":2900},{"p":"64108.2","s":5339},{"p":"64108.1","s":4556},{"p":"64107.1","s":7},{"p":"64106.9","s":6254},{"p":"64106.8","s":1566},{"p":"64106.6","s":9337},{"p":"64106.1","s":320},{"p":"64106","s":1200},{"p":"64105.6","s":6535},{"p":"64105.5","s":323},{"p":"64104.9","s":3220},{"p":"64104.5","s":11283},{"p":"64104.3","s":320},{"p":"64104.1","s":1559},{"p":"64104","s":5652},{"p":"64103.9","s":467},{"p":"64103.5","s":4699},{"p":"64102.5","s":320},{"p":"64101.7","s":6236},{"p":"64101.6","s":2900},{"p":"64101.4","s":6193},{"p":"64101.3","s":887},{"p":"64101.2","s":320},{"p":"64100.8","s":220},{"p":"64100.5","s":475},{"p":"64100.3","s":327},{"p":"64100.1","s":9337},{"p":"64099.8","s":320},{"p":"64099.4","s":320},{"p":"64099.1","s":200},{"p":"64098.4","s":320},{"p":"64098.3","s":2900},{"p":"64098","s":628},{"p":"64097.9","s":4699},{"p":"64097.7","s":1099},{"p":"64097.2","s":540},{"p":"64097.1","s":6371},{"p":"64096.8","s":587},{"p":"64096.7","s":248},{"p":"64096.2","s":2728},{"p":"64096.1","s":320},{"p":"64095.7","s":94},{"p":"64095","s":2900},{"p":"64094.9","s":163},{"p":"64094.7","s":657},{"p":"64093.7","s":4727}],"contract":"BTC_USDT","id":65983690767,"t":1724555574785},"time":1724555574,"time_ms":1724555574875}\n'
        b'1724555575609199650 {"channel":"futures.order_book","event":"all","result":{"asks":[{"p":"64126.5","s":10994},{"p":"64128.1","s":6756},{"p":"64128.2","s":15208},{"p":"64130.5","s":346},{"p":"64131.5","s":984},{"p":"64131.6","s":1629},{"p":"64132.3","s":1},{"p":"64133.3","s":1},{"p":"64133.6","s":4},{"p":"64134","s":312},{"p":"64134.6","s":3565},{"p":"64134.7","s":1559},{"p":"64135","s":5941},{"p":"64135.5","s":2458},{"p":"64136.1","s":285},{"p":"64136.2","s":4},{"p":"64136.5","s":389},{"p":"64137","s":1949},{"p":"64137.1","s":18},{"p":"64137.3","s":1609},{"p":"64137.5","s":312},{"p":"64138.2","s":5596},{"p":"64138.3","s":2900},{"p":"64139","s":1},{"p":"64139.3","s":197},{"p":"64139.5","s":5278},{"p":"64139.6","s":4699},{"p":"64139.7","s":3152},{"p":"64140.3","s":5317},{"p":"64140.5","s":1559},{"p":"64140.8","s":654},{"p":"64141","s":312},{"p":"64141.1","s":1574},{"p":"64141.2","s":1949},{"p":"64141.3","s":4},{"p":"64141.8","s":25},{"p":"64143.2","s":44},{"p":"64143.5","s":1641},{"p":"64143.8","s":245},{"p":"64144","s":2907},{"p":"64144.1","s":10676},{"p":"64144.2","s":587},{"p":"64144.3","s":17782},{"p":"64144.5","s":316},{"p":"64144.7","s":2900},{"p":"64145.8","s":6232},{"p":"64145.9","s":9770},{"p":"64146.3","s":240},{"p":"64146.4","s":4},{"p":"64146.5","s":640},{"p":"64146.6","s":1958},{"p":"64147.4","s":248},{"p":"64147.8","s":7934},{"p":"64147.9","s":5019},{"p":"64148","s":13212},{"p":"64148.1","s":320},{"p":"64148.4","s":640},{"p":"64148.9","s":5318},{"p":"64149","s":467},{"p":"64149.6","s":4},{"p":"64149.7","s":1892},{"p":"64149.8","s":10508},{"p":"64149.9","s":5047},{"p":"64150","s":156},{"p":"64150.5","s":6007},{"p":"64151.1","s":16},{"p":"64151.5","s":312},{"p":"64151.7","s":5799},{"p":"64151.9","s":9657},{"p":"64152","s":15},{"p":"64153.1","s":320},{"p":"64153.7","s":3220},{"p":"64153.9","s":320},{"p":"64154","s":320},{"p":"64154.1","s":629},{"p":"64154.5","s":943},{"p":"64154.6","s":320},{"p":"64154.7","s":6604},{"p":"64155","s":331},{"p":"64155.1","s":640},{"p":"64155.2","s":320},{"p":"64155.5","s":1566},{"p":"64155.6","s":322},{"p":"64156.1","s":320},{"p":"64156.5","s":4939},{"p":"64157","s":2914},{"p":"64157.1","s":320},{"p":"64157.5","s":16},{"p":"64157.6","s":2005},{"p":"64158","s":598},{"p":"64158.2","s":4},{"p":"64158.7","s":4},{"p":"64158.9","s":1},{"p":"64159","s":10},{"p":"64159.2","s":5318},{"p":"64159.3","s":320},{"p":"64159.4","s":1871},{"p":"64160","s":1871},{"p":"64160.1","s":9337},{"p":"64160.3","s":2900}],"bids":[{"p":"64126.4","s":4913},{"p":"64125.5","s":1559},{"p":"64124.9","s":283},{"p":"64123.7","s":5896},{"p":"64123.5","s":312},{"p":"64123.4","s":31246},{"p":"64122.9","s":314},{"p":"64121.2","s":1},{"p":"64120.1","s":166},{"p":"64120","s":701},{"p":"64119.9","s":7},{"p":"64118.9","s":25},{"p":"64118.6","s":7},{"p":"64118","s":311},{"p":"64117.9","s":613},{"p":"64116.8","s":94},{"p":"64116.7","s":1566},{"p":"64116.6","s":5672},{"p":"64116.5","s":3213},{"p":"64116.4","s":390},{"p":"64116","s":320},{"p":"64115.9","s":94},{"p":"64115.8","s":338},{"p":"64115.3","s":4699},{"p":"64115.2","s":10340},{"p":"64115.1","s":5319},{"p":"64114.7","s":18398},{"p":"64114.6","s":320},{"p":"64114.4","s":16},{"p":"64114","s":38},{"p":"64113.9","s":1559},{"p":"64113.6","s":19},{"p":"64113","s":312},{"p":"64112.8","s":1879},{"p":"64112","s":3198},{"p":"64111.9","s":5327},{"p":"64111.7","s":2900},{"p":"64111.6","s":1},{"p":"64111.5","s":320},{"p":"64111.3","s":320},{"p":"64111.1","s":777},{"p":"64110.9","s":7},{"p":"64110.3","s":640},{"p":"64110","s":500},{"p":"64109.8","s":320},{"p":"64109.6","s":4699},{"p":"64109.5","s":312},{"p":"64109.4","s":600},{"p":"64109.2","s":320},{"p":"64109.1","s":320},{"p":"64108.8","s":970},{"p":"64108.6","s":970},{"p":"64108.5","s":1290},{"p":"64108.4","s":2900},{"p":"64108.2","s":5339},{"p":"64108.1","s":4556},{"p":"64107.1","s":7},{"p":"64106.9","s":6254},{"p":"64106.8","s":1566},{"p":"64106.6","s":9337},{"p":"64106.1","s":320},{"p":"64106","s":1200},{"p":"64105.6","s":6535},{"p":"64105.5","s":323},{"p":"64104.9","s":3220},{"p":"64104.5","s":11283},{"p":"64104.3","s":320},{"p":"64104.1","s":1559},{"p":"64104","s":5652},{"p":"64103.9","s":467},{"p":"64103.5","s":4699},{"p":"64102.5","s":320},{"p":"64101.7","s":6236},{"p":"64101.6","s":2900},{"p":"64101.4","s":6193},{"p":"64101.3","s":887},{"p":"64101.2","s":320},{"p":"64100.8","s":220},{"p":"64100.5","s":475},{"p":"64100.3","s":327},{"p":"64100.1","s":9337},{"p":"64099.8","s":320},{"p":"64099.4","s":320},{"p":"64099.1","s":200},{"p":"64098.4","s":320},{"p":"64098.3","s":2900},{"p":"64098","s":628},{"p":"64097.9","s":4699},{"p":"64097.7","s":1099},{"p":"64097.2","s":540},{"p":"64097.1","s":6371},{"p":"64096.8","s":587},{"p":"64096.7","s":248},{"p":"64096.2","s":2728},{"p":"64096.1","s":320},{"p":"64095.7","s":94},{"p":"64095","s":2900},{"p":"64094.9","s":163},{"p":"64094.7","s":657},{"p":"64093.7","s":4727}],"contract":"BTC_USDT","id":65983690779,"t":1724555574968},"time":1724555574,"time_ms":1724555574987}\n'

        1724745969634033509 {"channel":"futures.trades","event":"update","result":[{"id":326195647,"size":-74,"create_time":1724745969,"create_time_ms":1724745969350,"price":"2689.2","contract":"ETH_USDT"}],"time":1724745969,"time_ms":1724745969360}
        1724745969634873356 {"channel":"futures.trades","event":"update","result":[{"id":326195648,"size":-46,"create_time":1724745969,"create_time_ms":1724745969351,"price":"2689.15","contract":"ETH_USDT"}],"time":1724745969,"time_ms":1724745969360}

        1724745977010983241 {"channel":"futures.book_ticker","event":"update","result":{"t":1724745976732,"u":55431803663,"s":"ETH_USDT","b":"2689.25","B":864,"a":"2689.3","A":214},"time":1724745976,"time_ms":1724745976746}
        1724745977371427840 {"channel":"futures.book_ticker","event":"update","result":{"t":1724745977096,"u":55431803744,"s":"ETH_USDT","b":"2689.25","B":864,"a":"2689.3","A":74},"time":1724745977,"time_ms":1724745977106}

        1724745977321690069 {"channel":"futures.order_book_update","event":"update","result":{"U":55431803717,"a":[],"b":[{"p":"2688.35","s":469}],"s":"ETH_USDT","t":1724745977037,"u":55431803718},"time":1724745977,"time_ms":1724745977057}
        1724745977339645784 {"channel":"futures.order_book_update","event":"update","result":{"U":55431803719,"a":[],"b":[{"p":"2688.35","s":469}],"s":"ETH_USDT","t":1724745977058,"u":55431803720},"time":1724745977,"time_ms":1724745977077}

    Args:
        input_filename: Input filename with path.
        output_filename: If provided, the converted data will be saved to the specified filename in ``npz`` format.
        opt: Additional processing options:

             - ``m``: Processes ``markPriceUpdate`` stream with the following custom event IDs.

                - index: ``100``
                - mark price: ``101``
                - funding rate: ``102``

             - ``t``: Processes ``bookTicker`` stream with the following custom event IDs.

                - best bid: ``103``
                - best ask: ``104``

        base_latency: The value to be added to the feed latency.
                      See :func:`.correct_local_timestamp`.
        combined_stream: Raw stream type.
                         **combined stream:**

                         .. code-block::

                             {"stream":"solusdt@bookTicker","data":{"e":"bookTicker","u":4456408609867,"s":"SOLUSDT","b":"142.4440","B":"50","a":"142.4450","A":"3","T":1713571200009,"E":1713571200010}}
                             regular stream:
                             {"e":"bookTicker","u":4456408609867,"s":"SOLUSDT","b":"142.4440","B":"50","a":"142.4450","A":"3","T":1713571200009,"E":1713571200010}
        buffer_size: Sets a preallocated row size for the buffer.

    Returns:
        Converted data compatible with HftBacktest.
    """
    timestamp_slice = 19
    timestamp_mul = 1000000

    tmp = np.empty(buffer_size, event_dtype)
    row_num = 0
    with gzip.open(input_filename, 'r') as f:
        while True:
            line = f.readline()
            if not line:
                break
            local_timestamp = int(line[:timestamp_slice])
            message = json.loads(line[timestamp_slice + 1:])
            
            channel = message.get('channel')
            if combined_stream:
                data = message.get('result')
            else:
                data = message
            
            if data is not None:
                
                if channel == 'futures.trades':

                    # event_time = data['E']
                    for trade in data:

                        transaction_time = data['create_time_ms']
                        price = data['price']
                        qty = data['size']
                        exch_timestamp = int(transaction_time) * timestamp_mul
                        tmp[row_num] = (
                            TRADE_EVENT | (SELL_EVENT if data['size'] < 0 else BUY_EVENT), # trade initiator's side
                            exch_timestamp,
                            local_timestamp,
                            float(price),
                            float(qty),
                            0,
                            0,
                            0
                        )
                        row_num += 1
                elif channel == 'futures.order_book_update':
                    # event_time = data['E']
                    transaction_time = data['t']
                    exch_timestamp = int(transaction_time) * timestamp_mul
                    for px, qty in data['b']:
                        tmp[row_num] = (
                            DEPTH_EVENT | BUY_EVENT,
                            exch_timestamp,
                            local_timestamp,
                            float(px),
                            float(qty),
                            0,
                            0,
                            0
                        )
                        row_num += 1
                    for px, qty in data['a']:
                        tmp[row_num] = (
                            DEPTH_EVENT | SELL_EVENT,
                            exch_timestamp,
                            local_timestamp,
                            float(px),
                            float(qty),
                            0,
                            0,
                            0
                        )
                        row_num += 1
                elif channel == 'futures.book_ticker':
                    # event_time = data['E']
                    # 	最佳买方的价格，如果没有卖方，则为空串
                    # 	最佳买方的数量，如果没有卖方，则为 0
                    transaction_time = data['t']
                    bid_price = data['b']
                    bid_qty = data['B']
                    ask_price = data['a']
                    ask_qty = data['A']
                    exch_timestamp = int(transaction_time) * timestamp_mul
                    tmp[row_num] = (
                        103,
                        exch_timestamp,
                        local_timestamp,
                        float(bid_price),
                        float(bid_qty),
                        0,
                        0,
                        0
                    )
                    row_num += 1
                    tmp[row_num] = (
                        104,
                        exch_timestamp,
                        local_timestamp,
                        float(ask_price),
                        float(ask_qty),
                        0,
                        0,
                        0
                    )
                    row_num += 1
                elif channel == 'futures.order_book':
                    # snapshot
                    # event_time = msg['E']
                    transaction_time = message['t']
                    bids = message['bids']
                    asks = message['asks']
                    exch_timestamp = int(transaction_time) * timestamp_mul
                    if len(bids) > 0:
                        bid_clear_upto = float(bids[-1][0])
                        # clears the existing market depth upto the prices in the snapshot.
                        tmp[row_num] = (
                            DEPTH_CLEAR_EVENT | BUY_EVENT,
                            exch_timestamp,
                            local_timestamp,
                            bid_clear_upto,
                            0,
                            0,
                            0,
                            0
                        )
                        row_num += 1
                        # inserts the snapshot.
                        for px, qty in bids:
                            tmp[row_num] = (
                                DEPTH_SNAPSHOT_EVENT | BUY_EVENT,
                                exch_timestamp,
                                local_timestamp,
                                float(px),
                                float(qty),
                                0,
                                0,
                                0
                            )
                            row_num += 1
                    if len(asks) > 0:
                        ask_clear_upto = float(asks[-1][0])
                        # clears the existing market depth upto the prices in the snapshot.
                        tmp[row_num] = (
                            DEPTH_CLEAR_EVENT | SELL_EVENT,
                            exch_timestamp,
                            local_timestamp,
                            ask_clear_upto,
                            0,
                            0,
                            0,
                            0
                        )
                        row_num += 1
                        # inserts the snapshot.
                        for px, qty in asks:
                            tmp[row_num] = (
                                DEPTH_SNAPSHOT_EVENT | SELL_EVENT,
                                exch_timestamp,
                                local_timestamp,
                                float(px),
                                float(qty),
                                0,
                                0,
                                0
                            )
                            row_num += 1

    tmp = tmp[:row_num]

    print('Correcting the latency')
    tmp = correct_local_timestamp(tmp, base_latency)

    print('Correcting the event order')
    data = correct_event_order(
        tmp,
        np.argsort(tmp['exch_ts'], kind='mergesort'),
        np.argsort(tmp['local_ts'], kind='mergesort')
    )

    validate_event_order(data)

    if output_filename is not None:
        print('Saving to %s' % output_filename)
        np.savez_compressed(output_filename, data=data)

    return data
